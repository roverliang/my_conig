" PlugInstall [name ...] [#threads]	       安装插件
" PlugUpdate [name ...] [#threads]	       安装或更新插件
" PlugClean[!]				               删除未列出的插件（爆炸版本将在没有提示的情况下清除）
" PlugUpgrade				               本身升级vim-plug
" PlugStatus				               检查插件状态
" PlugDiff				                   检查来自先前更新的更改以及未决的更改
" PlugSnapshot[!] [output path]		       生成脚本以还原插件的当前快照
"
set nu
set tabstop=4       " Tab键替换的空格长度，默认8
set softtabstop=4   " 退格键退回缩进空格的长度
set shiftwidth=4    " 表示每一级缩进的长度
set expandtab       " 设置缩进用空格来表示
set cursorline      " 突出显示当前行
set autoindent      " 继承前一行的缩进方式，适用于多行注释
filetype on         " 检测文件类型
syntax on           " 语法高亮


" 为插件指定目录
call plug#begin('~/.vim/plugged')
" 允许任何有效的git URL  
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'
" 这里我们只安装 php 的插件【phpcd】
Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }
" 目录树
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" 显示git信息
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'valloric/youcompleteme'
Plug 'Chiel92/vim-autoformat'

" ctags 生成插件
Plug 'ludovicchabant/vim-gutentags'
" 状态栏 
Plug 'vim-airline/vim-airline'
"状态栏配色
Plug 'vim-airline/vim-airline-themes'

" 配色
Plug 'flazz/vim-colorschemes'

"php语法着色插件
Plug 'StanAngeloff/php.vim'

" PHP语法检查https://stackoverflow.com/questions/857885/formatting-php-code-within-vim
Plug 'stephpy/vim-php-cs-fixer'

Plug 'godlygeek/tabular'
Plug 'yegappan/mru' "最近文件列表
Plug 'vim-scripts/DoxygenToolkit.vim' " PHP注释插件
Plug 'fatih/vim-go',{'tag': '*'}
Plug 'majutsushi/tagbar'
call plug#end()

" ===================================UI配置===================================
colorscheme  Atelier_SeasideDark
set background=dark " 主题背景 dark-深色; light-浅色
" ===================================配置结束===================================

" ===================================NERDTreeToggle配置开始===================================
" 使用Ctrl + d 切换目录树
map <C-d> :NERDTreeToggle<CR>
" ctrl + w(double) 在目录和文件直接自由的切换.
"当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


"修改树的显示图标
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let NERDTreeAutoCenter=1
" 显示行号
let NERDTreeShowLineNumbers=1
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 设置宽度
let NERDTreeWinSize=40
" 开发的过程中，我们希望git信息直接在NERDTree中显示出来
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
" ===================================NERDTreeToggle配置结束===================================



" ===================================gutentags配置开始===================================
" doc地址：https://www.cnblogs.com/pengdonglin137/articles/10202606.html
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" 所生成的数据文件的名称 "
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数 "
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" ===================================gutentags配置结束===================================


"===================================php-cs-fixer配置开始==================================
"如何安装php-cs-fixer 详见：https://github.com/FriendsOfPHP/PHP-CS-Fixer
" If php-cs-fixer is in $PATH, you don't need to define line below
"let g:php_cs_fixer_path = "~/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar

" If you use php-cs-fixer version 1.x
let g:php_cs_fixer_level = "symfony"                   " options: --level (default:symfony)
let g:php_cs_fixer_config = "default"                  " options: --config
" If you want to define specific fixers:
"let g:php_cs_fixer_fixers_list = "linefeed,short_tag" " options: --fixers
"let g:php_cs_fixer_config_file = '.php_cs'            " options: --config-file
" End of php-cs-fixer version 1 config params

" If you use php-cs-fixer version 2.x
let g:php_cs_fixer_rules = "@PSR2"          " options: --rules (default:@PSR2)
"let g:php_cs_fixer_cache = ".php_cs.cache" " options: --cache-file
"let g:php_cs_fixer_config_file = '.php_cs' " options: --config
" End of php-cs-fixer version 2 config params

let g:php_cs_fixer_php_path = "php"               " Path to PHP
let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.
"nnoremap <silent><leader>pcd :call PhpCsFixerFixDirectory()<CR>
"nnoremap <silent><leader>pcf :call PhpCsFixerFixFile()<CR>
autocmd BufWritePost *.php silent! call PhpCsFixerFixFile()
"===================================php-cs-fixer配置结束==================================

"===================================TagList配置结束==================================

"===================================MRU配置开始==================================
" doc:http://www.vimkid.com/zh/3.html
let MRU_Max_Entries=100 "记录的条数
let MRU_Window_Height=10 "分割窗口的大小
let MRU_Auto_Close=1   "选择文件后打开此窗口自动关闭
let MRU_Use_Current_Window = 0  "设置默认在本窗口打开最近文件列表，而不是新的窗口；
map <C-h> <Esc>:MRU<Cr>
"===================================MRU配置结束==================================

" PHP注释插件DoxygenToolkit
let g:DoxygenToolkit_commentType = "php"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_briefTag_funcName = "yes"
let g:DoxygenToolkit_briefTag_post = ""
let g:DoxygenToolkit_templateParamTag_pre = "@tparam\t"
let g:DoxygenToolkit_paramTag_pre = "@param\tstring\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_throwTag_pre = "@throw\t"
" let g:DoxygenToolkit_fileTag = "@script\t"
let g:DoxygenToolkit_dateTag = "@modify\t"
let g:DoxygenToolkit_authorTag = "@author\t"
let g:DoxygenToolkit_versionTag = "@version\t"
let g:DoxygenToolkit_versionString = "1.0.0"
let g:DoxygenToolkit_blockTag = "@name\t"
let g:DoxygenToolkit_classTag = "@class\t"
let g:DoxygenToolkit_authorName = "mr.roverliang@gmail.com"
let g:doxygen_enhanced_color = 1
nmap ,hh :DoxAuthor<CR><ESC>k8==j$a
nmap cc :Dox<CR><ESC>k8==j$a<TAB>
nmap ,da :DoxAuthor<CR><ESC>k8==
nmap ,db :DoxBlock<CR><ESC>k8==

"光标
"let loaded_matchparen=1




"==============================================================================
" vim-go 插件
"==============================================================================
let g:go_fmt_command = "goimports" " 格式化将默认的 gofmt 替换
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_version_warning = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_generate_tags = 1

let g:godef_split=2



"==============================================================================
"  majutsushi/tagbar 插件
"==============================================================================

" majutsushi/tagbar 插件打开关闭快捷键
"nmap <F9> :TagbarToggle<CR>
map <C-f> <Esc>:TagbarToggle<Cr>
"autocmd FileType * nested :call tagbar#autoopen(0)
autocmd FileType go nested :TagbarOpen
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" ========================================================一些依赖安装============================================
" ### 1.catgs 安装
        "http://prdownloads.sourceforge.net/ctags/ctags-5.8.tar.gz
        "tar xf ctags-5.8.tar.gz
        "cd ctags-5.8/
        "sudo ./configure
        "sudo make
        "sudo make install

" ### 2.YouCompleteMe
        " 安装时间会比较长，需要先执行,安装python3的类库。桌面版好像不需要。
        " sudo apt install build-essential cmake python3-dev
        " cd cd ~/.vim/plugged/youcompleteme/
        " ./install.py --all
" ### 3.vim-go
"       " 安装过这个插件之后，要执行GoInstallBinaries
